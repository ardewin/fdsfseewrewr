from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, CopyTextButton
from keyboards import user_keyboard
from locales import t
from config import is_admin, app_settings
from loguru import logger
import re
import textwrap
from services import reminders
from services.instructions import send_or_edit
from services.core import get_best_server_cfg, server_manager, delete_user_profile, get_user_traffic, find_user_server
from services.telegram_utils import safe_send
from api.http import api_auth, api_clients, api_create_client, api_delete_client, api_inbounds_list, api_traffic, api_onlines, build_vless
from httpx import HTTPStatusError
import os

class UserFSM(StatesGroup):
    waiting_name = State()

def register_user_handlers(dp, bot):
    @dp.message(Command("start"))
    async def user_start(msg: types.Message, state: FSMContext):
        from services.core import find_user_server, server_manager
        prefix = f"{msg.from_user.id}_"
        cfg, user = await find_user_server(prefix)
        if user:
            link = build_vless(cfg, user["email"])
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", copy_text=CopyTextButton(text=link))]
                ]
            )
            await safe_send(msg.answer, f"<code>{link}</code>", disable_web_page_preview=True, reply_markup=kb)
            await send_or_edit(msg.chat.id, bot)
            await state.clear()
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        has_free = False
        for sid in server_manager.cfgs:
            if not await server_manager.is_full(sid):
                has_free = True
                break
        if not has_free:
            await safe_send(msg.answer, "‚õî –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            await state.clear()
            return
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ---
        CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
        CHANNEL_URL = os.getenv("CHANNEL_URL", "https://t.me/+2UXi1T8ZKEsyNGMy")
        try:
            member = await bot.get_chat_member(CHANNEL_ID, msg.from_user.id)
            if member.status not in ("member", "administrator", "creator"):
                raise Exception("not subscribed")
        except Exception:
            from config import app_settings
            support_url = f"https://t.me/{app_settings.SUPPORT_USERNAME.lstrip('@')}"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
                    [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_url)],
                ]
            )
            await safe_send(
                msg.answer,
                "‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.</b>\n\n",
                reply_markup=kb,
                parse_mode="HTML"
            )
            return
        # --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
        
        sent = await safe_send(msg.answer, "üîë –ù–∞–ø–∏—à–∏ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (3-20 —Å–∏–º–≤–æ–ª–æ–≤)")
        await state.update_data(intro={"chat_id": sent.chat.id, "msg_id": sent.message_id})
        await state.set_state(UserFSM.waiting_name)

    @dp.message(UserFSM.waiting_name)
    async def process_name(msg: types.Message, state: FSMContext):
        from services.core import ensure_user_profile
        name = msg.text.strip()
        notify_lower = False
        if any(c.isupper() for c in name):
            name = name.lower()
            notify_lower = True
        if not re.fullmatch(r"[a-z]{3,20}", name):
            return await safe_send(msg.answer, "‚ùóÔ∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3‚Äì20 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ (a-z).")
        if notify_lower:
            await safe_send(msg.answer, f"‚ÑπÔ∏è –ò–º—è: <code>{name}</code>")
        gen_msg = await safe_send(msg.answer, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á‚Ä¶")
        gen_msg_id = gen_msg.message_id
        gen_chat_id = gen_msg.chat.id
        await bot.send_chat_action(msg.chat.id, "typing")
        try:
            cfg, email = await ensure_user_profile(msg.from_user.id, name)
            link = build_vless(cfg, email)
            await safe_send(gen_msg.edit_text, "‚úÖ <b>–ö–ª—é—á –≥–æ—Ç–æ–≤.</b>")
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", copy_text=CopyTextButton(text=link))]
                ]
            )
            await safe_send(msg.answer, f"<code>{link}</code>", disable_web_page_preview=True, reply_markup=kb)
            await send_or_edit(msg.chat.id, bot)
        except RuntimeError as e:
            await safe_send(gen_msg.edit_text, f"‚õî {e}")
        except HTTPStatusError as e:
            logger.error("–û—à–∏–±–∫–∞ API x-ui: {}", e)
            await safe_send(gen_msg.edit_text, "–°–µ—Ä–≤–µ—Ä x-ui –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except TelegramBadRequest as e:
            logger.warning("Telegram API: {}", e)
            # TODO: –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É rate-limit
        finally:
            await state.clear()

    @dp.callback_query(F.data == "user_traffic")
    async def user_traffic(query: CallbackQuery):
        await query.answer()
        try:
            prefix = f"{query.from_user.id}_"
            sid = None
            user = None
            for s, cfg in server_manager.cfgs.items():
                clients = await server_manager.list_clients(s)
                user = next((c for c in clients if c["email"].startswith(prefix)), None)
                if user:
                    sid = s
                    break
            if not user or not sid:
                return await safe_send(query.message.answer, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            stats = await server_manager.get_traffic(sid, user)
            total = stats["uplink"] + stats["downlink"]
            used_gb = total / 1024**3
            up_gb = stats["uplink"] / 1024**3
            down_gb = stats["downlink"] / 1024**3
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_menu")]
                ]
            )
            await safe_send(query.message.answer,
                f"–í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ {used_gb:.2f} –ì–ë (‚¨Ü {up_gb:.2f} –ì–ë / ‚¨á {down_gb:.2f} –ì–ë)",
                parse_mode="HTML",
                reply_markup=kb
            )
        except Exception as e:
            await safe_send(query.message.answer, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞: {e}", reply_markup=user_keyboard())

    @dp.callback_query(F.data == "user_menu")
    async def user_menu(query: CallbackQuery):
        await query.answer()
        from services.core import find_user_server
        prefix = f"{query.from_user.id}_"
        cfg, user = await find_user_server(prefix)
        if user:
            link = build_vless(cfg, user["email"])
            await safe_send(query.message.answer,
                f"<code>{link}</code>",
                disable_web_page_preview=True
            )
            await send_or_edit(query.from_user.id, bot)
        else:
            await safe_send(query.message.answer, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=user_keyboard())

    @dp.callback_query(F.data == "toggle_reminder")
    async def cb_toggle(call: CallbackQuery):
        enabled = await reminders.toggle_enabled(call.from_user.id)
        await call.answer(
            "üîî –í–∫–ª—é—á–µ–Ω–æ" if enabled else "üîï –í—ã–∫–ª—é—á–µ–Ω–æ",
            show_alert=True
        )
        await send_or_edit(call.from_user.id, bot)

    @dp.message(Command("reminder"))
    async def cmd_reminder(msg: types.Message):
        await reminders.toggle_enabled(msg.chat.id)
        await send_or_edit(msg.chat.id, bot)

    @dp.callback_query(F.data == "delete_profile")
    async def delete_profile(query: CallbackQuery):
        await query.answer()
        try:
            from services.core import server_manager
            prefix = f"{query.from_user.id}_"
            found = False
            for sid, cfg in server_manager.cfgs.items():
                clients = await server_manager.list_clients(sid)
                user_clients = [c for c in clients if c["email"].startswith(prefix)]
                inbound_id = int(cfg.INBOUNDS.split(",")[0]) if hasattr(cfg, 'INBOUNDS') else 1
                for c in user_clients:
                    await server_manager.delete_client(sid, inbound_id, c["email"])
                    found = True
                if found:
                    await server_manager.invalidate_cache(sid, "clients")
            if found:
                await query.message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã.")
            else:
                await query.message.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    @dp.callback_query(F.data.in_(["reminder_yes", "reminder_no"]))
    async def cb_reminder_answer(call: types.CallbackQuery):
        if call.data == "reminder_yes":
            await reminders.toggle_enabled(call.from_user.id)
            text = "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        else:
            await reminders.mark_asked(call.from_user.id)
            text = "–û–∫, –Ω–µ –±—É–¥–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å."
        await call.message.edit_text(text)
        await call.answer()

    @dp.callback_query(F.data == "toggle_reminder")
    async def cb_toggle_reminder(call: types.CallbackQuery):
        enabled = await reminders.toggle_enabled(call.from_user.id)
        text = (
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!" if enabled
            else "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ."
        )
        await call.answer(text, show_alert=True)
        # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        setting = await reminders.get_setting(call.from_user.id)
        reminder_status = (
            "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:</b> <u>–≤–∫–ª—é—á–µ–Ω–æ</u> ‚úÖ"
            if setting and setting.enabled
            else "üîï <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ:</b> <u>–≤—ã–∫–ª—é—á–µ–Ω–æ</u> ‚ùå"
        )
        instr_text = (
            "üéâ <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>\n\n"
            "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ üëÜ\n"
            "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ‚ûï –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
            "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\n"
            "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª\n\n"
            f"{reminder_status}\n\n"
            "üí¨ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        "üîî –û–ø–æ–≤–µ—â–∞—Ç—å" if not (setting and setting.enabled) else "üîï –ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å",
                        callback_data="toggle_reminder"
                    )
                ]
            ]
        )
        await call.message.edit_text(instr_text, reply_markup=kb, parse_mode="HTML")

    @dp.message(Command("reminder"))
    async def reminder_toggle(msg: types.Message):
        enabled = await reminders.toggle_enabled(msg.chat.id)
        text = (
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!" if enabled
            else "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ."
        )
        await msg.answer(text)

    # --- –ù–æ–≤—ã–π callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    @dp.callback_query(F.data == "check_subscription")
    async def check_subscription_callback(call: CallbackQuery, state: FSMContext):
        CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
        CHANNEL_URL = os.getenv("CHANNEL_URL")
        try:
            member = await bot.get_chat_member(CHANNEL_ID, call.from_user.id)
            if member.status not in ("member", "administrator", "creator"):
                raise Exception("not subscribed")
        except Exception:
            await call.answer(
                "‚è≥ –í–∞—Å –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –≤ –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòä",
                show_alert=True
            )
            return
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π (–∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏)
        sent = await safe_send(call.message.answer, "üîë –ù–∞–ø–∏—à–∏ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (3-20 —Å–∏–º–≤–æ–ª–æ–≤)")
        await state.update_data(intro={"chat_id": sent.chat.id, "msg_id": sent.message_id})
        await state.set_state(UserFSM.waiting_name)
        await call.message.delete()

async def ask_support_reminder(chat_id: int, bot):
    setting = await reminders.get_setting(chat_id)
    if setting and setting.asked:
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="reminder_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="reminder_no"),
        ]
    ])
    await bot.send_message(
        chat_id,
        "üìÖ –ù–∞–ø–æ–º–Ω–∏—Ç—å —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–µ—Ä–≤–µ—Ä–∞?",
        reply_markup=kb,
    ) 