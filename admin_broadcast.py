from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import BufferedInputFile
import asyncio, io, textwrap
from loguru import logger
from aiolimiter import AsyncLimiter

from config import is_admin, app_settings
from db import SessionLocal, Broadcast, BroadcastErrorLog        # –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
from services import reminders
from services.telegram_utils import safe_send
from services.reminders import list_active_clients

router = Router()

# ---------- /send ----------
@router.message(Command("send"))
async def cmd_send(msg: types.Message):
    if not is_admin(msg.from_user):
        return

    #  /send <uid|@username> <text‚Ä¶>
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/send user_id|@username —Ç–µ–∫—Å—Ç</code>", parse_mode="HTML")

    _cmd, target, text = parts
    # --- –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º @username ‚Üí user_id -------------
    if target.startswith("@"):
        try:
            chat = await msg.bot.get_chat(target)
            target_id = chat.id
        except TelegramBadRequest:
            return await msg.answer("‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        try:
            target_id = int(target)
        except ValueError:
            return await msg.answer("‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")

    try:
        await safe_send(msg.bot.send_message, target_id, text)
        await msg.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        await msg.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {e.message}")

# ---------- /bc ----------
BATCH, PAUSE = 25, 1.2
limiter = AsyncLimiter(29, 1)

def get_progress_bar(current, total, length=10):
    percent = current / total if total else 0
    filled = int(percent * length)
    bar = '‚ñá' * filled + '‚ñÇ' * (length - filled)
    percent_str = f"{int(percent * 100)}%"
    return f"{bar} {percent_str}"

@router.message(Command("bc"))
async def cmd_bc(msg: types.Message):
    if not is_admin(msg.from_user):
        return

    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/bc —Ç–µ–∫—Å—Ç</code>", parse_mode="HTML")
    text = parts[1]

    ids = await reminders.list_all_chat_ids()
    if not ids:
        return await msg.answer("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")

    total = len(ids); ok = err = 0
    failed: list[tuple[int, str]] = []

    progress = await msg.answer(f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞‚Ä¶ 0 / {total}\n{get_progress_bar(0, total)}")

    async with ChatActionSender.typing(msg.bot, msg.chat.id):
        for i, cid in enumerate(ids, 1):
            try:
                async with limiter:
                    await safe_send(msg.bot.send_message, cid, text)
                ok += 1
            except Exception as e:
                err += 1
                failed.append((cid, e.__class__.__name__))

            if i % 5 == 0 or i == total:
                bar = get_progress_bar(i, total)
                async with limiter:
                    await safe_send(progress.edit_text,
                        f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞‚Ä¶ {i} / {total}\n{bar}\n"
                        f"‚úÖ {ok}  ‚ö†Ô∏è {err}",
                        silent=True)

            if i % BATCH == 0:
                await asyncio.sleep(PAUSE)

    await safe_send(progress.edit_text,
        f"üèÅ –ì–æ—Ç–æ–≤–æ!\n‚úÖ <b>{ok}</b>  ‚ö†Ô∏è <b>{err}</b>",
        parse_mode="HTML", silent=True)

    # –ª–æ–≥ –æ—à–∏–±–æ–∫ –≤ –ë–î (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    if failed:
        async with SessionLocal() as s:
            s.add_all([BroadcastErrorLog(bc_id=None, chat_id=c, reason=r) for c, r in failed])
            await s.commit()

        # –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤ —á–∞—Ç
        details = "\n".join(f"{cid} ‚Äî {reason}" for cid, reason in failed)
        if len(details) < app_settings.MAX_MSG_LEN - 100:
            await msg.answer(f"<b>–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b>\n{details}", parse_mode="HTML")
        else:
            buf = io.BytesIO(details.encode()); buf.name = "failed.txt"
            await msg.bot.send_document(msg.chat.id, BufferedInputFile(buf.read(), buf.name),
                                         caption="–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ") 