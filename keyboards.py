from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import app_settings
from services.core import server_manager
import asyncio

def user_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="üì≤ Android", url=app_settings.ANDROID_URL),
            InlineKeyboardButton(text="üçé iOS", url=app_settings.IOS_URL),
            InlineKeyboardButton(text="üíª Windows", url=app_settings.WINDOWS_URL),
        ],
        [
            InlineKeyboardButton(
                text="üìä –¢—Ä–∞—Ñ–∏–∫",
                callback_data="user_traffic"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                callback_data="delete_profile"
            ),
        ],
        [
            InlineKeyboardButton(
                text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                url=f"https://t.me/{app_settings.SUPPORT_USERNAME.lstrip('@')}"
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ï–¥–∏–Ω–∞—è back-–∫–Ω–æ–ø–∫–∞
def back_button(cb="admin_back") -> InlineKeyboardButton:
    return InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=cb)

def admin_menu_keyboard(sid: str, online: int = 0) -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text=f"üü¢ –û–Ω–ª–∞–π–Ω ({online})", callback_data="admin_onlines"),
            InlineKeyboardButton(text="üë• –í—Å–µ", callback_data="admin_clients"),
        ],
        [
            InlineKeyboardButton(text="üìä –¢—Ä–∞—Ñ–∏–∫", callback_data="admin_traffic"),
            InlineKeyboardButton(text="üåê –°–µ—Ä–≤–µ—Ä: {}".format(sid), callback_data="admin_select_server"),
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="admin_del"),
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="admin_sync_reminders"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def admin_actions_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="admin_del"),
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="admin_sync_reminders"),
            back_button(),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

async def admin_menu_syncing_keyboard(sid: str) -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ ‚è≥
    try:
        await server_manager._auth(sid)
        emoji = "üü¢"
    except Exception:
        emoji = "üî¥"
    rows = [
        [
            {"text": "üü¢ –û–Ω–ª–∞–π–Ω",  "cb": "admin_onlines"},
            {"text": "üë• –í—Å–µ",     "cb": "admin_clients"},
        ],
        [
            {"text": "üìä –í–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫", "cb": "admin_traffic"},
        ],
        [
            {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "cb": "admin_add"},
            {"text": "‚ûñ –£–¥–∞–ª–∏—Ç—å",  "cb": "admin_del"},
        ],
        [
            {"text": "‚è≥ –°–∏–Ω—Ö—Ä–æ",   "cb": "noop"},
        ],
        [
            {"text": f"{emoji} {sid}",  "cb": "admin_select_server"},
        ],
        [
            back_button(),
        ],
    ]
    kb = []
    for row in rows:
        kb.append([
            InlineKeyboardButton(text=btn["text"], callback_data=btn["cb"]) if isinstance(btn, dict) else btn
            for btn in (row if isinstance(row, list) else [row])
        ])
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_inline_keyboard(buttons):
    """
    :param buttons: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫ dict —Å –∫–ª—é—á–∞–º–∏:
        - text: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        - callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - url: url –¥–ª—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: InlineKeyboardMarkup
    """
    keyboard = []
    for row in buttons:
        keyboard_row = []
        for btn in row:
            keyboard_row.append(
                InlineKeyboardButton(
                    text=btn["text"],
                    callback_data=btn.get("callback_data"),
                    url=btn.get("url")
                )
            )
        keyboard.append(keyboard_row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def reminder_keyboard(enabled: bool) -> InlineKeyboardMarkup:
    btn_text = "üîï –ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å" if enabled else "üîî –û–ø–æ–≤–µ—â–∞—Ç—å"
    return make_inline_keyboard([
        [{"text": btn_text, "callback_data": "toggle_reminder"}]
    ])

async def admin_menu_for_with_status(selected_sid: str | None = None) -> InlineKeyboardMarkup:
    buttons = []
    for sid, cfg in server_manager.cfgs.items():
        try:
            await server_manager._auth(sid)
            emoji = "üü¢"
        except Exception:
            emoji = "üî¥"
        text = f"{emoji} {sid} ({cfg.SERVER_DOMAIN})"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"admin_server_{sid}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ... –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä ... 